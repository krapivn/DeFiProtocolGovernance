// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DeFiProtocolGovernance is Ownable {
    // Proposal structure
    struct Proposal {
        uint256 id;
        address proposer;
        string description;
        uint256 votesFor;
        uint256 votesAgainst;
        uint256 startTime;
        bool executed;
    }

    // Governance token
    IERC20 public governanceToken;

    // Proposal data
    mapping(uint256 => Proposal) public proposals;
    uint256 public proposalCount;
    uint256 public votingPeriod; // Voting period in seconds

    // Track who has voted on each proposal
    mapping(uint256 => mapping(address => bool)) public hasVoted;

    // Events
    event ProposalCreated(uint256 indexed id, address indexed proposer, string description);
    event Voted(uint256 indexed id, address indexed voter, bool inSupport, uint256 votes);
    event ProposalExecuted(uint256 indexed id);

    // Constructor
    constructor(address _governanceToken, uint256 _votingPeriod) {
        governanceToken = IERC20(_governanceToken);
        votingPeriod = _votingPeriod;
    }

    // Create a new proposal
    function createProposal(string memory description) external {
        require(governanceToken.balanceOf(msg.sender) > 0, "Must hold governance tokens to create proposal");

        uint256 newProposalId = proposalCount++;
        proposals[newProposalId] = Proposal({
            id: newProposalId,
            proposer: msg.sender,
            description: description,
            votesFor: 0,
            votesAgainst: 0,
            startTime: block.timestamp,
            executed: false
        });

        emit ProposalCreated(newProposalId, msg.sender, description);
    }

    // Vote on a proposal
    function vote(uint256 proposalId, bool inSupport) external {
        require(governanceToken.balanceOf(msg.sender) > 0, "Must hold governance tokens to vote");
        require(!hasVoted[proposalId][msg.sender], "You have already voted on this proposal");
        require(block.timestamp < proposals[proposalId].startTime + votingPeriod, "Voting period has ended");
        require(!proposals[proposalId].executed, "Proposal has already been executed");

        uint256 votes = governanceToken.balanceOf(msg.sender);
        if (inSupport) {
            proposals[proposalId].votesFor += votes;
        } else {
            proposals[proposalId].votesAgainst += votes;
        }

        hasVoted[proposalId][msg.sender] = true;
        emit Voted(proposalId, msg.sender, inSupport, votes);
    }

    // Execute a proposal
    function executeProposal(uint256 proposalId) external onlyOwner {
        require(block.timestamp >= proposals[proposalId].startTime + votingPeriod, "Voting period has not ended");
        require(!proposals[proposalId].executed, "Proposal has already been executed");
        require(proposals[proposalId].votesFor > proposals[proposalId].votesAgainst, "Proposal did not pass");

        // Execute proposal logic (example: emit event)
        proposals[proposalId].executed = true;

        emit ProposalExecuted(proposalId);
    }

    // Get proposal details
    function getProposal(uint256 proposalId) external view returns (Proposal memory) {
        return proposals[proposalId];
    }

    // Get the voting period
    function getVotingPeriod() external view returns (uint256) {
        return votingPeriod;
    }

    // Set a new voting period (only owner)
    function setVotingPeriod(uint256 newVotingPeriod) external onlyOwner {
        votingPeriod = newVotingPeriod;
    }
}
